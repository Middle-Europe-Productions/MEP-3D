#include <MEP-3D/key_event.hpp>

std::string KeyboardToString(Keyboard keyboard) {
  switch (keyboard) {
    case Keyboard::A:
      return "A";
    case Keyboard::B:
      return "B";
    case Keyboard::C:
      return "C";
    case Keyboard::D:
      return "D";
    case Keyboard::E:
      return "E";
    case Keyboard::F:
      return "F";
    case Keyboard::G:
      return "G";
    case Keyboard::H:
      return "H";
    case Keyboard::I:
      return "I";
    case Keyboard::J:
      return "J";
    case Keyboard::K:
      return "K";
    case Keyboard::L:
      return "L";
    case Keyboard::M:
      return "M";
    case Keyboard::N:
      return "N";
    case Keyboard::O:
      return "O";
    case Keyboard::P:
      return "P";
    case Keyboard::Q:
      return "Q";
    case Keyboard::R:
      return "R";
    case Keyboard::S:
      return "S";
    case Keyboard::T:
      return "T";
    case Keyboard::U:
      return "U";
    case Keyboard::V:
      return "V";
    case Keyboard::W:
      return "W";
    case Keyboard::X:
      return "X";
    case Keyboard::Y:
      return "Y";
    case Keyboard::Z:
      return "Z";
    case Keyboard::Space:
      return "Space";
    case Keyboard::Apostrophe:
      return "Apostrophe";
    case Keyboard::Comma:
      return "Comma";
    case Keyboard::Minus:
      return "Minus";
    case Keyboard::Period:
      return "Period";
    case Keyboard::Slash:
      return "Slash";
    case Keyboard::Key0:
      return "Key0";
    case Keyboard::Key1:
      return "Key1";
    case Keyboard::Key2:
      return "Key2";
    case Keyboard::Key3:
      return "Key3";
    case Keyboard::Key4:
      return "Key4";
    case Keyboard::Key5:
      return "Key5";
    case Keyboard::Key6:
      return "Key6";
    case Keyboard::Key7:
      return "Key7";
    case Keyboard::Key8:
      return "Key8";
    case Keyboard::Key9:
      return "Key9";
    case Keyboard::Semicolon:
      return "Semicolon";
    case Keyboard::Equal:
      return "Equal";
    case Keyboard::LeftBracket:
      return "LeftBracket";
    case Keyboard::Backslash:
      return "Backslash";
    case Keyboard::RightBracket:
      return "RightBracket";
    case Keyboard::Accent:
      return "Accent";
    case Keyboard::Escape:
      return "Escape";
    case Keyboard::Enter:
      return "Enter";
    case Keyboard::Tab:
      return "Tab";
    case Keyboard::Backspace:
      return "Backspace";
    case Keyboard::Insert:
      return "Insert";
    case Keyboard::Delete:
      return "Delete";
    case Keyboard::RightArrow:
      return "RightArrow";
    case Keyboard::LeftArrow:
      return "LeftArrow";
    case Keyboard::DownArrow:
      return "DownArrow";
    case Keyboard::UpArrow:
      return "UpArrow";
    case Keyboard::CapsLock:
      return "CapsLock";
    case Keyboard::F1:
      return "F1";
    case Keyboard::F2:
      return "F2";
    case Keyboard::F3:
      return "F3";
    case Keyboard::F4:
      return "F4";
    case Keyboard::F5:
      return "F5";
    case Keyboard::F6:
      return "F6";
    case Keyboard::F7:
      return "F7";
    case Keyboard::F8:
      return "F8";
    case Keyboard::F9:
      return "F9";
    case Keyboard::F10:
      return "F10";
    case Keyboard::F11:
      return "F11";
    case Keyboard::F12:
      return "F12";
    case Keyboard::F13:
      return "F13";
    case Keyboard::F14:
      return "F14";
    case Keyboard::F15:
      return "F15";
    case Keyboard::F16:
      return "F16";
    case Keyboard::F17:
      return "F17";
    case Keyboard::F18:
      return "F18";
    case Keyboard::F19:
      return "F19";
    case Keyboard::F20:
      return "F20";
    case Keyboard::LeftShift:
      return "LeftShift";
    case Keyboard::LeftControl:
      return "LeftControl";
    case Keyboard::LeftAlt:
      return "LeftAlt";
    case Keyboard::LeftSuper:
      return "LeftSuper";
    case Keyboard::RightShift:
      return "RightShift";
    case Keyboard::RightControl:
      return "RightControl";
    case Keyboard::RightAlt:
      return "RightAlt";
    case Keyboard::RightSuper:
      return "RightSuper";
    case Keyboard::UnknownKey:
      return "UnknownKey";
  }
}
